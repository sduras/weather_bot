import asyncio
import aiohttp
from datetime import datetime, timedelta, timezone
import math
import traceback

async def fetch_weather_data():
    async with aiohttp.ClientSession() as session:
        params = {
            "latitude": 48.5,
            "longitude": 34.9,
            "daily": ["weather_code", "temperature_2m_max", "temperature_2m_min", "apparent_temperature_max", "apparent_temperature_min", "sunrise", "sunset", "daylight_duration", "sunshine_duration", "uv_index_max", "uv_index_clear_sky_max", "precipitation_sum", "rain_sum", "showers_sum", "snowfall_sum", "precipitation_hours", "precipitation_probability_max", "wind_speed_10m_max", "wind_direction_10m_dominant", "shortwave_radiation_sum"],
            "timezone": "Europe/Berlin",
            "past_days": 1,
            "forecast_days": 3
        }
        async with session.get("https://api.open-meteo.com/v1/dwd-icon", params=params) as weather_data_raw:
            return await weather_data_raw.json()

async def interpolate_wind_description(wind_value, wind_mapping):
    keys = sorted(wind_mapping.keys())
    for i in range(len(keys)-1):
        if keys[i] <= wind_value <= keys[i+1]:
            return wind_mapping[keys[i]] + " -> " + wind_mapping[keys[i+1]]
    return wind_mapping.get(wind_value, "Unknown")

async def moon(): 
    now = datetime.now(timezone.utc)
    epoch = datetime(2000, 1, 6, 18, 14, 0, tzinfo=timezone.utc)
    moon_cycle = 29.53058867
    delta_since_epoch = now - epoch
    days_since_epoch = delta_since_epoch.total_seconds() / 86400
    phase_angle = 2 * math.pi * (days_since_epoch % moon_cycle) / moon_cycle
    if 0 <= phase_angle <= math.pi / 14:
        phase = "üåë –Ω–æ–≤–∏–π –ú—ñ—Å—è—Ü—å"
    elif math.pi / 14 < phase_angle <= math.pi / 14 * 3:
        phase = "üåí –º–æ–ª–æ–¥–∏–π –ú—ñ—Å—è—Ü—å"
    elif math.pi / 14 * 3 < phase_angle <= math.pi / 14 * 5:
        phase = "üåì –ø–µ—Ä—à–∞ —á–≤–µ—Ä—Ç—å"
    elif math.pi / 14 * 5 < phase_angle <= math.pi / 14 * 9:
        phase = "üåî –ø—Ä–∏–±—É–≤–∞—é—á–∏–π –ú—ñ—Å—è—Ü—å"
    elif math.pi / 14 * 9 < phase_angle <= math.pi / 14 * 10:
        phase = "üåï –ø–æ–≤–Ω–∏–π –ú—ñ—Å—è—Ü—å"
    elif math.pi / 14 * 10 < phase_angle <= math.pi / 14 * 12:
        phase = "üåñ —Å–ø–∞–¥–∞—é—á–∏–π –ú—ñ—Å—è—Ü—å"
    elif math.pi / 14 * 12 < phase_angle <= math.pi / 14 * 13:
        phase = "üåó –æ—Å—Ç–∞–Ω–Ω—è —á–≤–µ—Ä—Ç—å"
    else:
        phase = "üåò c—Ç–∞—Ä–∏–π –ú—ñ—Å—è—Ü—å"

    return phase

async def weather_reports():
    daily_data = await fetch_weather_data()
    today = datetime.today()
    tomorrow = today + timedelta(days=1)
    # yesterday = today - timedelta(days=1)
    seconds_per_hour = 3600
    seconds_per_minute = 60
    # yesterday_data = daily_data["daily"]['time'].index(yesterday.strftime("%Y-%m-%d"))
    today_data = daily_data["daily"]['time'].index(today.strftime("%Y-%m-%d"))
    tomorrow_data = daily_data["daily"]['time'].index(tomorrow.strftime("%Y-%m-%d"))
    today_sunshine = daily_data["daily"]["sunshine_duration"][today_data] / seconds_per_hour
    tomorrow_sunshine = daily_data["daily"]["sunshine_duration"][tomorrow_data] / seconds_per_hour
    today_daylight = daily_data["daily"]["daylight_duration"][today_data] / seconds_per_hour
    tomorrow_daylight = daily_data["daily"]["daylight_duration"][tomorrow_data] / seconds_per_hour
    daylight_difference = ((tomorrow_daylight * seconds_per_hour) - (today_daylight * seconds_per_hour)) // seconds_per_minute
    direction = "–±—ñ–ª—å—à–µ" if daylight_difference > 0 else "–º–µ–Ω—à–µ"
    today_code = daily_data["daily"]["weather_code"][today_data]
    tomorrow_code =  daily_data["daily"]["weather_code"][tomorrow_data]
    weather_code_mapping = {
        0.0: "‚òÄÔ∏è  —è—Å–Ω–µ –Ω–µ–±–æ",
        1.0: "‚òÄÔ∏è  –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —è—Å–Ω–æ",
        2.0: "üå§ —á–∞—Å—Ç–∫–æ–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å",
        3.0: "üå• —Ö–º–∞—Ä–Ω–æ",
        45.0: "üå´ —Ç—É–º–∞–Ω",
        48.0: "‚ùÑÔ∏è  –ø–∞–º–æ—Ä–æ–∑—å",
        51.0: "üå´Ô∏è –ª–µ–≥–∫–∞ –º—Ä—è–∫–∞",
        53.0: "üî≤ –ø–æ–º—ñ—Ä–Ω–∞ –º—Ä—è–∫–∞",
        55.0: "üî≥ –ø–æ–≤–Ω–∞ –º—Ä—è–∫–∞",
        56.0: "üíß –∫—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â",
        57.0: "üí¶ —Å–∏–ª—å–Ω–∏–π –∫—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â",
        61.0: "üåßÔ∏è –Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â",
        63.0: "üåßÔ∏è –ø–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â",
        65.0: "üíß —Å–∏–ª—å–Ω–∏–π –¥–æ—â",
        66.0: "‚õ∏Ô∏è  –æ–∂–µ–ª–µ–¥–∏—Ü—è",
        67.0: "ü§∏ —Å–∏–ª—å–Ω–∞ –æ–∂–µ–ª–µ–¥–∏—Ü—è",
        71.0: "‚ùÑÔ∏è  –Ω–µ–≤–µ–ª–∏–∫–∏–π —Å–Ω—ñ–≥–æ–ø–∞–¥",
        73.0: "‚ùÑÔ∏è  —Å–µ—Ä–µ–¥–Ω—ñ–π —Å–Ω—ñ–≥–æ–ø–∞–¥",
        75.0: "‚ùÑÔ∏è  —Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥–æ–ø–∞–¥",
        77.0: "üßä –≥—Ä–∞–¥",
        80.0: "üå®Ô∏è –ª–µ–≥–∫–∏–π –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º",
        81.0: "üå®Ô∏è –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º",
        82.0: "‚òÇÔ∏è  —Å–∏–ª—å–Ω–∏–π –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º",
        85.0: "üí® –ª–µ–≥–∫—ñ —Ö—É—Ä—Ç–æ–≤–∏–Ω–∏",
        86.0: "üå™Ô∏è —Å–∏–ª—å–Ω—ñ —Ö—É—Ä—Ç–æ–≤–∏–Ω–∏",
        95.0: "‚ö°–≥—Ä–æ–∑–∞",
        96.0: "‚õàÔ∏è  –≥—Ä–æ–∑–∞ –∑ –≥—Ä–∞–¥–æ–º",
        99.0: "‚õàÔ∏è  –≥—Ä–æ–∑–∞ –∑ –≤–∞–∂–∫–∏–º –≥—Ä–∞–¥–æ–º"
    }
    today_weather_description = weather_code_mapping.get(today_code, "Unknown")
    tomorrow_weather_description = weather_code_mapping.get(tomorrow_code, "Unknown")
    today_wind = daily_data["daily"]["wind_direction_10m_dominant"][today_data]
    tomorrow_wind = daily_data["daily"]["wind_direction_10m_dominant"][tomorrow_data] 
    wind_mapping = {
    0.0: "–ø—ñ–≤–Ω—ñ—á–Ω–∏–π",
    45.0: "–ø—ñ–≤–Ω—ñ—á–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π",
    90.0: "—Å—Ö—ñ–¥–Ω–∏–π",
    135.0: "–ø—ñ–≤–¥–µ–Ω–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π",
    180.0: "–ø—ñ–≤–¥–µ–Ω–Ω–∏–π",
    225.0: "–ø—ñ–≤–¥–µ–Ω–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π",
    270.0: "–∑–∞—Ö—ñ–¥–Ω–∏–π",
    315.0: "–ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π",
    360.0: "–ø—ñ–≤–Ω—ñ—á–Ω–∏–π"
    }
    today_wind_description = await interpolate_wind_description(today_wind, wind_mapping)
    tomorrow_wind_description = await interpolate_wind_description(tomorrow_wind, wind_mapping)

    wind_speed_mapping = {
    (0.0, 0.3 * 3.6): "ü¶ã —à—Ç–∏–ª—å",
    (0.4 * 3.6, 1.5 * 3.6): "—Ç–∏—Ö–∏–π",
    (1.6 * 3.6, 3.4 * 3.6): "–ª–µ–≥–∫–∏–π",
    (3.5 * 3.6, 5.4 * 3.6): "—Å–ª–∞–±–∫–∏–π",
    (5.5 * 3.6, 7.9 * 3.6): "–ø–æ–º—ñ—Ä–Ω–∏–π", 
    (8.0 * 3.6, 10.7 * 3.6): "—Å–≤—ñ–∂–∏–π",
    (10.8 * 3.6, 13.8 * 3.6): "üí®   —Å–∏–ª—å–Ω–∏–π",
    (13.9 * 3.6, 17.1 * 3.6): "‚ö†Ô∏è   –º—ñ—Ü–Ω–∏–π",
    (17.2 * 3.6, 20.7 * 3.6): "‚ö†Ô∏è    –¥—É–∂–µ –º—ñ—Ü–Ω–∏–π",
    (20.8 * 3.6, 24.4 * 3.6): "üî¥ —à—Ç–æ—Ä–º",
    (24.5 * 3.6, 28.4 * 3.6): "üî¥ —Å–∏–ª—å–Ω–∏–π —à—Ç–æ—Ä–º",
    (28.5 * 3.6, 32.6 * 3.6): "üî¥ –∂–æ—Ä—Å—Ç–æ–∫–∏–π —à—Ç–æ—Ä–º",
    (32.7 * 3.6, float('inf')): "üôÄ —É—Ä–∞–≥–∞–Ω",
    }

    today_wind_speed = daily_data["daily"]["wind_speed_10m_max"][today_data]
    tomorrow_wind_speed = daily_data["daily"]["wind_speed_10m_max"][tomorrow_data]
    today_wind_speed_description = next((description for speed_range, description in wind_speed_mapping.items() if speed_range[0] <= today_wind_speed < speed_range[1]), "Unknown")  
    tomorrow_wind_speed_description = next((description for speed_range, description in wind_speed_mapping.items() if speed_range[0] <= tomorrow_wind_speed < speed_range[1]), "Unknown")
    moon_phase = await moon()
    today_temp_max = daily_data["daily"]["temperature_2m_max"][today_data]
    today_temp_min = daily_data["daily"]["temperature_2m_min"][today_data]
    today_apparent_temp = daily_data["daily"]["apparent_temperature_max"][today_data]
    tomorrow_temp_max = daily_data["daily"]["temperature_2m_max"][tomorrow_data]
    tomorrow_temp_min = daily_data["daily"]["temperature_2m_min"][tomorrow_data]
    tomorrow_apparent_temp = daily_data["daily"]["apparent_temperature_max"][tomorrow_data]

    today_precipitation = daily_data["daily"]["precipitation_sum"][today_data]
    tomorrow_precipitation = daily_data["daily"]["precipitation_sum"][tomorrow_data]

    precipitation_mapping = {
    (0.0, 0.1): "‚òÄÔ∏è  –±–µ–∑ –æ–ø–∞–¥—ñ–≤",
    (0.2, 2.5): "‚òÇÔ∏è  –Ω–µ–≤–µ–ª–∏–∫—ñ –æ–ø–∞–¥–∏",
    (2.6, 10.0): "Ô∏è‚òî –æ–ø–∞–¥–∏",  
    (11.0, 25.0): "‚òî c–∏–ª—å–Ω—ñ –æ–ø–∞–¥–∏",
    (26.0, 50.0): "‚õàÔ∏è  –∑–ª–∏–≤–∞",
    (51.0, float('inf')): "‚ö†Ô∏è  –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ñ –æ–ø–∞–¥–∏",
}
    today_precipitation_description = next((description for speed_range, description in precipitation_mapping.items() if speed_range[0] <= today_precipitation < speed_range[1]), "Unknown")  
    tomorrow_precipitation_description = next((description for speed_range, description in precipitation_mapping.items() if speed_range[0] <= tomorrow_precipitation < speed_range[1]), "Unknown")

    today_report = f"–°—å–æ–≥–æ–¥–Ω—ñ –≤ –º. –î–Ω—ñ–ø—Ä–æ {today_weather_description}, {moon_phase}. T–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ñ–¥ {today_temp_min} –¥–æ {today_temp_max} ¬∞C, –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {today_apparent_temp} ¬∞C. –í—ñ—Ç–µ—Ä {today_wind_speed_description}, {today_wind_description}, –¥–æ {today_wind_speed} –º/c. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤: {today_precipitation} –º–º. ({today_precipitation_description}). –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–Ω—è {today_daylight:.1f} –≥–æ–¥., —Å–æ–Ω—Ü–µ —Å–≤—ñ—Ç–∏—Ç–∏–º–µ {today_sunshine:.1f} –≥–æ–¥."
    
    tomorrow_report = f"–ó–∞–≤—Ç—Ä–∞ - {tomorrow_weather_description}. T–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ñ–¥ {tomorrow_temp_min} –¥–æ {tomorrow_temp_max} ¬∞C. –í—ñ—Ç–µ—Ä {tomorrow_wind_speed_description}, {tomorrow_wind_description}, –¥–æ {tomorrow_wind_speed} –º/c. –°–æ–Ω—Ü–µ —Å–≤—ñ—Ç–∏—Ç–∏–º–µ {tomorrow_sunshine:.1f} –≥–æ–¥., —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–Ω—è - {tomorrow_daylight:.1f} –≥–æ–¥. (–Ω–∞ {abs(daylight_difference):.0f} —Ö–≤. {direction}, –Ω—ñ–∂ —Å—å–æ–≥–æ–¥–Ω—ñ.). –î–µ–Ω–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤: ({tomorrow_precipitation_description}.) "

    return today_report, tomorrow_report


def get_weather_data_sync():
    event_loop = asyncio.new_event_loop()
    try:
        asyncio.set_event_loop(event_loop)
        formatted_data = event_loop.run_until_complete(weather_reports())
        return formatted_data
    except Exception as e:
        traceback.print_exc()
        raise Exception(f"Error: {e}")
    finally:
        event_loop.close()

if __name__ == "__main__":
    asyncio.run(weather_reports())
